#!/bin/bash
#
VERSION="2020-04-06 01:13"
THIS_FILE="mountup_lib_gui.lib"
#
#@@Quit#@@Quit to command-line prompt.#@@break
#@@Show#@@Show mounted directories.#@@f_show_mount_points_gui
#@@About#@@Version information of this script.#@@f_about_gui
#@@Code History#@@Display code change history of this script.#@@f_code_history_gui
#
# +--------------------------------------------------------------------------+
# |                                                                          |
# | Add additional source file servers, share-points, and mount-points here. |
# |                                                                          |
# +--------------------------------------------------------------------------+
#
# Format: <Delimiter>//<Source File Server>/<Shared directory><Delimiter>/<Mount-point on local PC><Delimiter><Shared directory description>
#
# @#//hansolo/public#@#/mnt/hansolo/public#@#Hansolo Server Publicly shared files.
# @#//hansolo/public/jobs#@#/mnt/hansolo/jobs#@#Hansolo Server Publicly shared job information.
#
# @#//chewbacca/photos#@#/mnt/chewbacca/photos#@#Chewbacca Server shared photos.
#
# @#//luke/school#@#/mnt/luke/school#@#Luke Server shared school files.
#
# @#//leia/music#@#/mnt/leia/music#@#Leia Server shared music.
#
# @#//yoda/public-no-backup#@#/mnt/yoda/public-no-backup#@#Yoda Server shared files not backed up.
#
# @#//r2d2/geekstuff#@#/mnt/r2d2/geekstuff#@#R2D2 Server shared geek stuff.
# @#//r2d2/geekstuff#@#/mnt/r2d2/geekscripts#@#R2D2 Server shared geek scripts.
#
# @#//c3po/library#@#/mnt/c3po/library#@#C3PO Server shared Library.
#
# Add your actual data below:
#@#//beansprout/public#@#/mnt/beansprout/public#@#Public files.
#@#//beansprout/public-no-backup#@#/mnt/beansprout/public-no-backup#@#Public files but not backed up.
#@#//beansprout/robert#@#/mnt/beansprout/robert#@#Roberts documents.
#@#//papyrus/public#@#/mnt/papyrus/public#@#Public folder.
#@#//papyrus/public-no-backup#@#/mnt/papyrus/public-no-backup#@#Public folder but not backed up.
#@#//papyrus/robert#@#/mnt/papyrus/robert#@#Robert folder.
#@#//parsley/public#@#/mnt/parsley/public#@#Public files.
#@#//parsley/public-no-backup#@#/mnt/parsley/public-no-backup#@#Public files but not backed up.
#@#//parsley/robert#@#/mnt/parsley/robert#@#Roberts documents.
#@#//scotty/public#@#/mnt/scotty/public#@#Public files.
#@#//scotty/public-no-backup#@#/mnt/scotty/public-no-backup#@#Public files but not backed up.
#@#//scotty/robert#@#/mnt/scotty/robert#@#Roberts documents.
#
#
# MOUNT COMMAND RETURN CODES
#       mount has the following return codes (the bits can be ORed):
#
#       0      success
#
#       1      incorrect invocation or permissions
#
#       2      system error (out of memory, cannot fork, no more loop devices)
#
#       4      internal mount bug
#
#       8      user interrupt
#
#       16     problems writing or locking /etc/mtab
#
#       32     mount failure
#
#       64     some mount succeeded
#
# +------------------------------+
# |       Function f_message     |
# +------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#          $2 - "OK"  [OK] button at end of text.
#               "NOK" No [OK] button at end of text but pause n seconds
#                     to allow reader to read text by using sleep n command.
#          $3 - Title.
#          $4 - Text string or text file. 
#          
#    Uses: None.
# Outputs: ERROR. 
#
f_message () {
      #
      case $1 in
           "dialog" | "whiptail")
           #
           # If text strings have Dialog \Z commands for font color bold/normal, 
           # they must be used AFTER \n (line break) commands.
           # Example: "This is a test.\n\Z1\ZbThis is in bold-red letters.\n\ZnThis is in normal font."
           #
           # Is $4 a text string or a text file?
           if [ -r "$4" ] ; then
              # If $4 is a text file.
              #
              # Get the screen resolution or X-window size.
              # Get rows (height).
              YY=$(stty size | awk '{ print $1 }')
              # Get columns (width).
              XX=$(stty size | awk '{ print $2 }')
              #
              # If text file, calculate number of lines and length of sentences.
              # to calculate height and width of Dialog box.
              #
              # Calculate longest line length in TEMP_FILE to find maximum menu width for Dialog or Whiptail.
              # The "Word Count" wc command output will not include the TEMP_FILE name
              # if you redirect "<$TEMP_FILE" into wc.
              X=$(wc --max-line-length <$4)
              #
              # Calculate number of lines or Menu Choices to find maximum menu lines for Dialog or Whiptail.
              Y=$(wc --lines <$4)
              #
              if [ "$2" = "OK" ] ; then
                 # If $2 is "OK" then use a Dialog/Whiptail textbox.
                 #
                 case $1 in
                      dialog)
                      # Dialog needs about 6 more lines for the header and [OK] button.
                      let Y=Y+6
                      # If number of lines exceeds screen/window height then set textbox height.
                      if [ $Y -ge $YY ] ; then
                         Y=$YY
                      fi
                      #
                      # Dialog needs about 10 more spaces for the right and left window frame. 
                      let X=X+10
                      # If line length exceeds screen/window width then set textbox width.
                      if [ $X -ge $XX ] ; then
                         X=$XX
                      fi
                      dialog --colors --title "$3" --textbox "$4" $Y $X
                      ;;
                      whiptail)
                      # Whiptail does not have OPTION --colors.
                      # Whiptail needs about 6 more lines for the header and [OK] button.
                      let Y=Y+6
                      # If number of lines exceeds screen/window height then set textbox height.
                      if [ $Y -ge $YY ] ; then
                         Y=$YY
                      fi
                      #
                      # Whiptail needs about 5 more spaces for the right and left window frame. 
                      let X=X+5
                      # If line length exceeds screen/window width then set textbox width.
                      if [ $X -ge $XX ] ; then
                         X=$XX
                      fi
                      whiptail --scrolltext --title "$3" --textbox "$4" $Y $X
                      ;;
                 esac
                 #
              else
                 # If $2 is "NOK" then use a Dialog infobox or Whiptail textbox.
                 case $1 in
                      whiptail)
                      # Whiptail only does a --textbox or --msgbox (not --infobox).
                      whiptail --title "$3" --textbox "$4" $Y $X
                      ;;
                      dialog)
                      #
                      # Translate "\n" or the <crlf> to "|". Join all lines together delimited by "|".
                      #   $ cat $4 | tr "\n" "|" 
                      #
                      # Substitute string "|" with string "\n"
                      #   $ sed -i 's/|/\\n/g' 
                      #
                      # Join all lines together delimited by string "\n" 
                      # to allow the output of multiple lines of text in a single string variable
                      # using the interpretation of back-slash escapes to recreate each line <CRLF>.
                      #   $ cat $4 | tr "\n" "|"  > $4 ; sed -i 's/|/\\n/g' $4
                      #
                      # A Dialog Infobox displays the message in a window without you having to an press [OK] button.
                      TEMP_FILE=$THIS_FILE"men.sh_temp2.txt"
                      echo $4
                      echo
                      cat "$4" | tr "\n" "|"  > $TEMP_FILE ; sed -i 's/|/\\n/g' $TEMP_FILE
                      Z=$(cat $TEMP_FILE)
                      dialog --colors --title "$3" --infobox "$Z" $Y $X ; sleep 3
                      ;;
                 esac
              fi
              #
              if [ -r $TEMP_FILE ] ; then
                 rm $TEMP_FILE
              fi
              #
           else
              # If $4 is a text string.
              #
              if [ "$2" = "OK" ] ; then
                 # If $2 is "OK" then use a Dialog msgbox.
                 #
                 X=$(echo -n "$4" | wc -c)
                 let X=X+10
                 Y=7
                 #
                 case $1 in
                      whiptail)
                      # Whiptail only does a --textbox or--msgbox (not --infobox).
                      whiptail --title "$3" --msgbox "$4" $Y $X
                      ;;
                      dialog)
                      dialog --colors --title "$3" --msgbox "$4" $Y $X
                      ;;
                 esac
              else
                 # If $2 is "NOK" then use a Dialog infobox.
                 #
                 X=$(echo -n "$4" | wc -c)
                 let X=X+10
                 Y=7
                 #
                 case $1 in
                      whiptail)
                      # Whiptail only does a --textbox or--msgbox (not --infobox).
                      whiptail --title "$3" --msgbox "$4" $Y $X
                      ;;
                      dialog)
                      dialog --colors --title "$3" --infobox "$4" $Y $X ; sleep 3
                      ;;
                  esac
               fi
           fi
           ;;
           *)
           # Is $4 a text string or a text file?
           #
           if [ -r "$4" ] ; then
              # If $4 is a text file.
              #
              if [ "$2" = "OK" ] ; then
                 # If $2 is "OK" then use command "less".
                 #
                 clear  # Blank the screen.
                 #
                 # Display text file contents.
                 less -P '%P\% (Spacebar, PgUp/PgDn, Up/Dn arrows, press q to quit)' $4
                 #
                 clear  # Blank the screen.
                 #
              else
                 # If $2 is "NOK" then use "cat" and "sleep" commands to give time to read it.
                 #
                 clear  # Blank the screen.
                 # Display title.
                 echo
                 echo $3
                 echo
                 echo
                 # Display text file contents.
                 cat $4
                 sleep 5
                 #
                 clear  # Blank the screen.
                 #
              fi
              #
              if [ -r $TEMP_FILE ] ; then
                 rm $TEMP_FILE
              fi
              #
           else
              # If $4 is a text string.
              #
              if [ "$2" = "OK" ] ; then
                 # If $2 is "OK" then use f_press_enter_key_to_continue.
                 #
                 clear  # Blank the screen.
                 #
                 # Display title.
                 echo
                 echo -e $3
                 echo
                 echo
                 # Display text file contents.
                 echo -e $4
                 echo
                 f_press_enter_key_to_continue
                 #
                 clear  # Blank the screen.
                 #
              else
                 # If $2 is "NOK" then use f_press_enter_key_to_continue.
                 #
                 clear  # Blank the screen.
                 #
                 # Display title.
                 echo
                 echo -e $3
                 echo
                 echo
                 # Display text file contents.
                 echo -e $4
                 echo
                 echo
                 sleep 5
                 #
                 clear  # Blank the screen.
                 #
              fi
           fi
           ;;
      esac
} # End of function f_message.
#
# +----------------------------------------+
# |        Function f_menu_arrays          |
# +----------------------------------------+
#
#  Inputs: $1=file of menu choice strings.
#    Uses: ARRAY_NUM, ARRAY_NAME, ARRAY_VALUE, TEMP_FILE, XSTR.
# Outputs: MAX_LENGTH. MAX_LINES, MAX_CHOICE_LENGTH, arrays CHOICE(n), SUMMARY(n), FUNC(n). 
#
f_menu_arrays () {
      # Create arrays CHOICE, SUMMARY, FUNC to store menu option information.
      #
      # Example:
      # Menu option name is "Directory Listing"
      # Shared directory to be mounted is "//hansolo/public/contacts"
      # Local PC mount-point is "/mnt/hansolo/contacts"
      #
      #     CHOICE[1]="Directory Listing"
      #     SUMMARY[1]="get a listing of files in a directory."
      #     FUNC[1]="f_dir_listing"     # Function to do command "ls -l".
      #
      unset CHOICE SUMMARY FUNC  # Delete arrays in memory.
      ARRAY_NUM=1
      TEMP_FILE="dropfsd_temp.txt"
      #
      #                 Field-1 (null)  Field-2                      Field-3                     Field-4
      # Format of XSTR="<Delimiter> <Choice Title> <Delimiter> <Short Description> <Delimiter> <function>^<OPTION1>^<OPTION2>"
      #
      if [ -r $TEMP_FILE ] ; then
         rm $TEMP_FILE
      fi
      #
      while read XSTR
      do
            case $XSTR in
                  \#@@*) echo $XSTR >>$TEMP_FILE
                  ;;
            esac
      done < $1  # Read lines from file $1.
      #
      # Delete last line which is from the case statement pattern 
      # immediately above. 
      # Delete last line in $TEMP_FILE which is actual code not data.
      sed -i /echo*/d $TEMP_FILE 
      #
      # Calculate longest line length in TEMP_FILE to find maximum menu width
      # for Dialog or Whiptail.
      # The "Word Count" wc command output will not include the TEMP_FILE name
      # when you redirect "<$TEMP_FILE" into wc.
      #
      MAX_LENGTH=0  # Initialize variable maximum string length.
      while read XSTR
      do
            X=$(echo $XSTR | awk -F "#@@" '{ print $2" "$3 }')
            X_LENGTH=$(echo $X | wc --max-line-length)
            if [ $MAX_LENGTH -lt $X_LENGTH ] ; then
               MAX_LENGTH=$X_LENGTH
            fi
      done < $TEMP_FILE
      #
      # Calculate number of lines or Menu Choices to find maximum menu lines
      # for Dialog or Whiptail.
      MAX_LINES=$(wc --lines <$TEMP_FILE)
      #
      MAX_CHOICE_LENGTH=0
      #
      while read XSTR
      do
            # Set array CHOICE[n] = <field-1> or "Choice Title" of XSTR.
            ARRAY_NAME="CHOICE"
            ARRAY_VALUE=$(echo $XSTR | awk -F "#@@" '{ if ( $3 ) { print $2 }}')
            ARRAY_VALUE=$(echo $ARRAY_VALUE | tr ' ' '_')
            eval $ARRAY_NAME[$ARRAY_NUM]=$ARRAY_VALUE
            #
            # Calculate length of next Menu Option Choice string.
                CHOICE_LENGTH=${#ARRAY_VALUE}
                # Save the value of the longest length of the Menu Option.
                if [ $MAX_CHOICE_LENGTH -lt $CHOICE_LENGTH ] ; then
                   # Save new maximum string length.
                   MAX_CHOICE_LENGTH=$CHOICE_LENGTH
                fi
            #
            # Set array SUMMARY[n]=<field-2> or "Summary" of XSTR.
            ARRAY_NAME="SUMMARY"
            ARRAY_VALUE=$(echo $XSTR | awk -F "#@@" '{ if ( $3 ) { print $3 }}')
            ARRAY_VALUE=$(echo $ARRAY_VALUE | tr ' ' '_')
            eval $ARRAY_NAME[$ARRAY_NUM]=$ARRAY_VALUE
            #
            # Set array $FUNC=<field-3> or "Function" of XSTR.
            ARRAY_NAME="FUNC"
            ARRAY_VALUE=$(echo $XSTR | awk -F "#@@" '{ if ( $3 ) { print $4 }}')
            ARRAY_VALUE=$(echo $ARRAY_VALUE | tr ' ' '_')
            eval $ARRAY_NAME[$ARRAY_NUM]=$ARRAY_VALUE
            #
            let ARRAY_NUM=$ARRAY_NUM+1
      done < $TEMP_FILE
      #
      if [ -r $TEMP_FILE ] ; then
         rm $TEMP_FILE
      fi
      unset TEMP_FILE XSTR  # Throw out this variable.
} # End of f_menu_arrays.
#
# +----------------------------------------+
# |       Function f_server_arrays         |
# +----------------------------------------+
#
#  Inputs: "mountup_lib_gui.lib" (THIS_FILE).
#    Uses: XSTR, SERVER_NAME, NEXT_SERVER_NAME, SERVER_NUM, ARRAY_NUM.
# Outputs: SERVER[$SERVER_NUM]=<Name of server>^<Description of shared directory>.
#          SRV[$SERVER_NUM]=<1st 2-letters of server name for pattern matching in menu case statement>.
#          SERVER_SP[SERVER_NUM]=<Server's shared directory to be mounted>.
#          LOCAL_MP[SERVER_NUM]=<Mount-point of local PC>.
#          SERVER_DESC[1]=<Description of Shared Directory contents>.
#          MAX_LENGTH. MAX_LINES, MAX_CHOICE_LENGTH.
#
f_server_arrays () {
      # Create arrays to handle mount-point names and server source directory names.
      #
      # Example:
      # Server name is "hansolo"
      # Shared directory to be mounted is "//hansolo/public/contacts"
      # Local PC mount-point is "/mnt/hansolo/contacts"
      #
      #     SERVER[1]="hansolo"
      #     SRV[1]="ha" <1st 2-letters of server name for pattern matching in menu case statement>
      #     hansolo_SP[1]="//hansolo/public/contacts  # Share-point on hansolo.
      #     hansolo_MP[1]="/mnt/hansolo/contacts"     # Local mount-point on Local PC.
      #     hansolo_DESC[1]="Shared_contact_list"  # Description of shared folder contents (substitute <underscore> for <space> characters).
      #
      SERVER_NUM=0 # Initialize.
      SERVER_NAME="" # Initialize.
      ARRAY_NUM=1
      TEMP_FILE="mountup_temp.txt"
      #
      #        Field-1                                Field-2                                   Field-3                               Field-4
      # Format of XSTR="<Delimiter>//<Source File Server>/<Shared directory><Delimiter>/<Mount-point on local PC><Delimiter><Shared directory description>"
      # Read line of data having 3 delimiters and 4 fields. Save fields 2, 3, 4.
      # echo $(awk -F "$DELIMITER" '{ if ( $3 ) { print $2 "^" $3 "^" $4; }}' $THIS_FILE)
      #
      if [ -r $TEMP_FILE ] ; then
         rm $TEMP_FILE
      fi
      #
      while read XSTR
      do
            case $XSTR in
                  \#@#*) echo $XSTR >>$TEMP_FILE
                  ;;
            esac
      done < mountup_lib_gui.lib
      #
      # Delete last line which is from the case statement pattern 
      # immediately above. 
      # Delete last line in $TEMP_FILE which is actual code not data.
      sed -i /echo*/d $TEMP_FILE # Delete last line in $TEMP_FILE which is actual code not data.
      #
      # Calculate longest line length in TEMP_FILE to find maximum menu width
      # for Dialog or Whiptail.
      # The "Word Count" wc command output will not include the TEMP_FILE name
      # when you redirect "<$TEMP_FILE" into wc.
      #
      MAX_LENGTH=0  # Initialize variable maximum string length.
      while read XSTR
      do
            X=$(echo $XSTR | awk -F "#@#" '{ print $2" "$3 }')
            X_LENGTH=$(echo $X | wc --max-line-length)
            if [ $MAX_LENGTH -lt $X_LENGTH ] ; then
               MAX_LENGTH=$X_LENGTH
            fi
      done < $TEMP_FILE
      #
      # Calculate number of lines or Menu Choices to find maximum menu lines
      # for Dialog or Whiptail.
      MAX_LINES=$(wc --lines <$TEMP_FILE)
      #
      MAX_CHOICE_LENGTH=0
      #
      while read XSTR
      do
            # Since format of share-point directory is "//<SERVER_NAME>" the name is in <field-3> with delimiter "/".
            NEXT_SERVER_NAME=$(echo $XSTR | awk -F "/" '{ if ( $3 ) { print $3 }}')
            if [ "$SERVER_NAME" != "$NEXT_SERVER_NAME" ] ; then
               SERVER_NAME=$NEXT_SERVER_NAME
               let SERVER_NUM=$SERVER_NUM+1 # Increment server array index.
               ARRAY_NUM=1                  # Different server so reset index for share-point ond mount-point arrays.
            fi
            SERVER[$SERVER_NUM]="$SERVER_NAME"
            SRV[$SERVER_NUM]=${SERVER_NAME:0:2}  # SRV[n]=<the first 2-letters of the Server Name>
            #echo "SRV[$SERVER_NUM]=${SRV[$SERVER_NUM]}"      # Test diagnostic line.
            #
            # Set array $SERVER_NAME_SP[SERVER_NUM]=<field-2> or "Shared directory" of XSTR.
            ARRAY_NAME=$SERVER_NAME"_SP"
            ARRAY_VALUE=$(echo $XSTR | awk -F "#@#" '{ if ( $3 ) { print $2 }}')
            eval $ARRAY_NAME[$ARRAY_NUM]=$ARRAY_VALUE
            #echo "$ARRAY_NAME[$ARRAY_NUM]=${ARRAY_NAME[$ARRAY_NUM]}" # Test diagnostic line.
            #
            # Calculate length of next Menu Option Choice string.
            CHOICE_LENGTH=${#ARRAY_VALUE}
            # Save the value of the longest length of the Menu Option.
            if [ $MAX_CHOICE_LENGTH -lt $CHOICE_LENGTH ] ; then
               # Save new maximum string length.
               MAX_CHOICE_LENGTH=$CHOICE_LENGTH
            fi
            #
            # Set array $SERVER_NAME_MP[SERVER_NUM]=<field-3> of XSTR.
            ARRAY_NAME=$SERVER_NAME"_MP"
            ARRAY_VALUE=$(echo $XSTR | awk -F "#@#" '{ if ( $3 ) { print $3 }}')
            #echo ARRAY_VALUE=$ARRAY_VALUE  # Test diagnostic line.
            #echo "$ARRAY_NAME[$ARRAY_NUM]=${$ARRAY_NAME[$ARRAY_NUM]}" # Test diagnostic line.
            eval $ARRAY_NAME[$ARRAY_NUM]=$ARRAY_VALUE
            #
            # Set array $SERVER NAME DESC[SERVER_NUM]=<field-4> of XSTR.
            ARRAY_NAME=$SERVER_NAME"_DESC"
            #echo XSTR=$XSTR  # Test diagnostic line.
            ARRAY_VALUE=$(echo $XSTR | awk -F "#@#" '{ if ( $3 ) { print $4 }}')
            ARRAY_VALUE=$(echo $ARRAY_VALUE | tr ' ' '_')
            #echo ARRAY_VALUE=$ARRAY_VALUE  # Test diagnostic line.
            eval $ARRAY_NAME[$ARRAY_NUM]=$ARRAY_VALUE
            #echo ${peapod_DESC[@]}  # Test diagnostic line.
            #
            let ARRAY_NUM=$ARRAY_NUM+1
      done < $TEMP_FILE
      if [ -r $TEMP_FILE ] ; then
         rm $TEMP_FILE
      fi
      unset XSTR SERVER_NUM ARRAY_NUM SERVER_NAME NEXT_SERVER_NAME # Throw out this variable.
} # End of f_server_arrays.
#
# +----------------------------------------+
# |        Function f_test_connection      |
# +----------------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#          $2 Network name of server. 
#    Uses: None.
# Outputs: ERROR. 
#
f_test_connection () {
      #
      # Check if there is an internet connection before doing a download.
      case $1 in
           whiptail | dialog)
           ping -c 1 -q $2 >/dev/null # Ping server address.
           ERROR=$?
           if [ $ERROR -ne 0 ] ; then
              case $1 in
                   dialog)
                   f_message $1 "OK" "Ping Test Internet Connection" "\n\Z1\Zb     No Internet connection, cannot access on-line data files.\Zn"
                   ;;
                   whiptail)
                   f_message $1 "OK" "Ping Test Internet Connection" "\n     No Internet connection, cannot access on-line data files."
                   ;;
              esac
           else
              f_message $1 "NOK" "Ping Test Internet Connection" "Internet connnection to $2 is good."
           fi
           ;;
           *)
           echo
           echo "Test Internet Connection to $2"
           echo
           ping -c 1 -q $2  # Ping server address.
           ERROR=$?
           if [ $ERROR -ne 0 ] ; then
              echo -n $(tput setaf 1) # Set font to color red.
              echo -n $(tput bold)
              f_message $1 "NOK" "Ping Test Internet Connecton" ">>> No Internet connection, cannot access on-line data files. <<<"
              echo -n $(tput sgr0)
           else
              f_message $1 "NOK" "Ping Test Internet Connecton" "Internet connnection to $2 is good."
              echo
              echo
           fi
           ;;
      esac
} # End of function f_test_connection.
#
# +----------------------------------------+
# |         Function f_username_gui        |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=USERNAME (default).
#          $3=MP - Mount-point to display on --usernamebox.
#    Uses: temp.txt.
# Outputs: SMBUSER, ERROR.
#
f_username_gui() {
      #$1 --title "User name for $3" --inputbox "Enter SMB mount-point user name:" 10 50 $2 2>temp.txt
      ERROR=$?
      SMBUSER=$(cat temp.txt)
      if [ -z "$SMBUSER" ] ; then
         SMBUSER=$2
      fi
      #
      if [ -r temp.txt ] ; then
         rm temp.txt
      fi
      case $ERROR in
           1) SMBUSER="" ;;   # <Cancel> button pressed.
           255) SMBUSER="" ;; # <ESC> key pressed.
      esac
} # End of function f_username_gui.
#
# +----------------------------------------+
# |         Function f_password_gui        |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=MP - Mount-point to display on --passwordbox.
#    Uses: temp.txt.
# Outputs: PASSWORD, ERROR.
#
f_password_gui() {
      PASSWORD=""
      if [ $1 = "dialog" ] ; then
         $1 --title "Password for $2" --clear --insecure --passwordbox "Enter SMB mount-point password:" 10 70 2>temp.txt
         ERROR=$?
      else
         $1 --title "Password for $2" --clear --passwordbox "Enter SMB mount-point password:" 10 70 2>temp.txt
         ERROR=$?
      fi
      PASSWORD=$(cat temp.txt)
      #
      if [ -r temp.txt ] ; then
         rm temp.txt
      fi
      case $ERROR in
           1) PASSWORD="" ;;   # <Cancel> button pressed.
           255) PASSWORD="" ;; # <ESC> key pressed.
      esac
} # End of function f_password_gui.
#
# +----------------------------------------+
# |    Function f_show_mount_points_gui    |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $THIS_FILE,
#    Uses: X, Y, ERROR, temp.txt.
# Outputs: None.
#
f_show_mount_points_gui () {
      date >temp.txt
      echo >>temp.txt
      # Test if this version of "df" has these OPTIONS.
      df -h --type=cifs --output=source,avail,target >/dev/null 2>&1
      ERROR=$?
      if [ $ERROR -eq 1 ] ; then
         # Older version of "df" or nothing mounted, so use df with minimal OPTIONS.
         df -h --type=cifs >>temp.txt
         ERROR=$?
         if [ $ERROR -eq 1 ] ; then
            echo >>temp.txt
            echo " >>> Nothing is mounted <<<" >>temp.txt
            echo "No mount-points are mounted." >>temp.txt
         else
            echo >>temp.txt
            grep "//" /etc/mtab | awk -F "," '{ print $1,$5 }' | awk '{ print $5,"mounted",$1}' >>temp.txt
         fi
      else
         df -h --type=cifs --output=source,avail,target >>temp.txt
         echo >>temp.txt
         grep "//" /etc/mtab | awk -F "," '{ print $1,$5 }' | awk '{ print $5,"mounted",$1}' >>temp.txt
      fi
      #
      if [ $ERROR -eq 1 ] ; then
         $1 --title "Nothing is mounted" --textbox temp.txt 11 40
      else
         # Get the screen resolution or X-window size.
         # Get rows (height).
         Y=$(stty size | awk '{ print $1 }')
         # Get columns (width).
         X=$(stty size | awk '{ print $2 }')
         #
         $1 --title "Mount-points (use arrow keys to scroll up/down/side-ways)" --textbox temp.txt $Y $X
      fi
      #
      if [ -r temp.txt ] ; then
         rm temp.txt
      fi
      unset X Y ERROR  # Throw out these variables.
} # End of function f_show_mount_points_gui.
#
# +----------------------------------------+
# |     Function f_display_temp_file_gui   |
# +----------------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" The CLI GUI application in use.
#    Uses: temp.txt.
# Outputs: None.
#
f_display_temp_file_gui () {
      if [ -s temp.txt ] ; then  # File temp.txt contains error message, so display it.
         $1 --textbox temp.txt 20 70
      fi
      #
      if [ -r temp.txt ] ; then
         rm temp.txt
      fi
} # End of function f_display_temp_file_gui.
#
# +----------------------------------------+
# |   Function f_mount_or_dismount_all_gui |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=Server name.
#          #3 "mount" or "dismount".
#    Uses: ERROR, EXITOUT, NUM, SP, MP.
# Outputs: None.
#
f_mount_or_dismount_all_gui () {
      #
      # Example:
      # Server name is "Server01"
      # Shared directory to be mounted is "//server01/public/contacts"
      # Local PC mount-point is "/mnt/server01/contacts"
      #
      # The arrays are <Server name>_SP=<Server_name>/<Shared directory>
      #                Server01_SP[2]="//mnt/server01/
      #                <Local PC name>_MP=<Local_PC_name>/<Mount-point directory>
      #
      # SERVER[1]="Server01"
      # SERVER_SP[1]="//server01/public/contacts"
      # LOCAL_MP[1]="/mnt/server01/contacts"
      #
      # f_server_arrays
      #
      EXITOUT=0
      NUM=1
      # When mounting, ask for a username and password once for all mount-points.
      if [ $3 = "mount" ] ; then
         f_username_gui $1 "$USER" "All mount-points"  # Get user name.
         if [ $ERROR -ne 0 ] ; then  # <Cancel> button was pressed.
            EXITOUT=1
         fi
         if [ $EXITOUT -eq 0 ] ; then
            f_password_gui $1 $2        # Get password.
            if [ $ERROR -ne 0 ] ; then  # <Cancel> button was pressed.
               EXITOUT=1
            fi
         fi
      fi
      #
      while [ $EXITOUT -eq 0 ]
      do
            # eval allows indirection of array name.
            # echo "\" tells echo to disreguard the first "$" to prevent parameter expansion before passing it to echo which creates the read array command.
            SP=$(eval echo "\$\{$2_SP[$NUM]\}")   # Create command "${<server_name>_SP[$NUM]}" to read string of Shared directory      from array <Server name>_SP[n].
            MP=$(eval echo "\$\{$2_MP[$NUM]\}")   # Create command "${<server_name>_MP[$NUM]}" to read string of Mount-point directory from array <Server name>_MP[n].
                                                  #
            SP=$(eval echo $SP)                   # Read Shared directory from array <Server name>_SP[1].
            if [ -n "$SP" ] ; then                # Does array element exist? (specifying Shared Directory).
               MP=$(eval echo $MP)                # Read Mount-point directory from array <Server name>_MP[1].
               if [ -n "$MP" ] ; then             # Does array element exist? (specifying Mount-Point Directory).
                  if [ $3 = "mount" ] ; then
                     f_mount_gui $1 $SP $MP $SMBUSER $PASSWORD   # Now actually mount the shared directory at the mount-point on the local PC.
                  else
                     f_dismount_gui $1 $MP        # Dismount the mount-point directory.
                  fi
               else
                  EXITOUT=1  # Array element MP does not exist so no more mount-points specified.
               fi
            else
               EXITOUT=1  # Array element SP does not exist so no more shared directories specified.
            fi
            NUM=$(($NUM+1))  #Increment NUM by 1.
      done
      unset EXITOUT NUM SP MP
} # End of function f_mount_or_dismount_all_gui.
#
# +----------------------------------------+
# |           Function f_mount_gui         |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=Share-point.
#          $3=Mount-point.
#          $4=SMBUSER  (smb username).
#          $5=PASSWORD (smb password).
#    Uses: QUIT, ERROR. temp.txt.
# Outputs: None.
#
f_mount_gui () {
      # mountpoint command 0=directory is a mountpoint (already mounted).
      #                    1=directory is not a mountpoint (not mounted).
      #
      # Test if mounted already, if so, don't mount again or will get error.
      # echo "Share-point="$2  # Diagnostic line.
      # echo "Mount-point="$3  # Diagnostic line.
      #
      QUIT=0       # QUIT=1 quits until-loop, QUIT=0 until-loop
      SMBUSER=$4   # Set SMBUSER and PASSWORD since if fails to mount,
      PASSWORD=$5  # then user can change their value.
      until [ $QUIT -eq 1 ]  # Start loop.
      do
            # Is the shared directory mounted yet?
            mountpoint $3 >/dev/null 2>temp.txt # Write any error messages to file temp.txt.
            ERROR=$?
            if [ $ERROR -eq 0 ] ; then  # Directory is already mounted.
               QUIT=1  # Quit loop.
               f_display_temp_file_gui $1
            else  # Directory is not mounted yet.
               if [ $QUIT -eq 0 ] ; then
                  # Do not use $4 or $5 because f_test_mount_gui updates $SMBUSER and $PASSWORD.
                  f_mount_gui2 $1 $2 $3 $SMBUSER $PASSWORD
                  f_test_mount_gui $1 $2 $3  # Output: QUIT=1/0.
                                             #         SMBUSER.
                                             #         PASSWORD.
               fi
            fi
            #
            if [ -r temp.txt ] ; then
               rm temp.txt
            fi
      done  # End loop.
      unset ERROR QUIT  # Throw out this variable.
} # End of function f_mount_gui.
#
# +----------------------------------------+
# |           Function f_mount_gui2        |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=Share-point.
#          $3=Mount-point.
#          $4=$SMBUSER  (smb username).
#          $5=$PASSWORD (smb password).
#    Uses: None.
# Outputs: ERROR.
#
f_mount_gui2 () {
      sudo mount -o username=$4 -o password=$5 -t cifs $2 $3 2>temp.txt # Write any error messages to file temp.txt.
      ERROR=$?
      # echo "mount -o username=$4 -o password=$5 -t cifs $2 $3"  # Diagnostic line.
      if [ "$ERROR" -ne 0 ] ; then
         echo >>temp.txt
         echo "Failed to mount" >temp2.txt
         echo "Share-point: $2" >>temp2.txt
         echo "onto" >>temp2.txt
         echo "Mount-point: $3" >>temp2.txt
         echo >>temp2.txt
         cat temp.txt >>temp2.txt
         mv temp2.txt temp.txt
         f_display_temp_file_gui $1
         # Check if host is a Raspberry Pi.
         # XX=$(lsb_release -a | grep -c Raspbian)
         # Raspberry Pi Model 1 cannot use -o password option.
         # Omit the mount -o password flag.
         # if [ $XX ] ; then
         #    sudo mount -o username=$4 -t cifs $2 $3 2>>temp.txt # Write any error messages to file temp.txt.
         #    ERROR=$?
         #   if [ $ERROR -eq 1 ] ; then
         #      f_display_temp_file_gui $1
         #   fi
         # fi
      fi
} # End of function f_mount_gui2.
#
# +----------------------------------------+
# |       Function f_test_mount_gui        |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=Share-point.
#          $3=Mount-point.
#    Uses: ERROR.
# Outputs: QUIT, SMBUSER. temp.txt.
#f_mount_or_dismount_all_gui
f_test_mount_gui () {
      mountpoint $3 >/dev/null 2>temp.txt # Write any error messages to file temp.txt. Get status of mountpoint, mounted?.
      if [ $ERROR -eq 0 ] ; then  # Directory is already mounted.
         QUIT=1  # Quit loop.
         # echo "Directory $3 is already mounted."  # Diagnostic line.
      else
         # Mount failed, Do you want to try again?
         if [ $1 = "dialog" ] ; then
            $1 --title "Failed to mount" --no-label "No, quit" --yesno "Failed to mount\nShare-point: $2\nonto\nMount-point: $3\n\nTry another password to mount $2?" 10 70
            ERROR=$?
         else
            $1 --title "Failed to mount" --no-button "No, quit" --yesno "Failed to mount\nShare-point: $2\nonto\nMount-point: $3\n\nTry another password to mount $2?" 15 70
            ERROR=$?
         fi
         if [ $ERROR -eq 0 ] ; then  # Outputs user response to $ERROR.
            # ERROR status=0. Yes, try another SMB username and password to mount Share-point.
            QUIT=0 # Try again to mount.
            f_username_gui $1 $SMBUSER $3  # Set the default username to the SMB username entered previously.
            if [ $ERROR -ne 0 ] ; then
               QUIT=1  # Quit f_mount_gui loop, return to previous menu.
               EXITOUT=1  # Exit loop of next share/mount-point to mount in f_mount_or_dismount_all_gui.
            fi
            #
            if [ $ERROR -eq 0 ] ; then
               f_password_gui $1 $2
               if [ $ERROR -ne 0 ] ; then
                  QUIT=1 # Quit f_mount_gui loop, return to previous menu.
                  EXITOUT=1  # Exit loop of next share/mount-point to mount in f_mount_or_dismount_all_gui.
               fi
            fi
            #if [ $SMBUSER != $USER ] ; then
            #   f_password_gui $1 $2  # Force a new password if changing user name.
            #fi
            # if [ $ERROR -ne 0 ] ; then  # <Cancel> button was pressed.
            #    QUIT=1  # Quit loop.
            # fi
            #
         else
            # ERROR status=1. No, do not try another password just return to previous menu. Exit loop.
            QUIT=1  # Quit f_mount_gui loop, return to previous menu.
            EXITOUT=1  # Exit loop of next share/mount-point to mount in f_mount_or_dismount_all_gui.
         fi
      fi
} # End of function f_test_mount_gui.
#
# +----------------------------------------+
# |         Function f_dismount_gui        |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=Mount-point.
#    Uses: ERROR.
# Outputs: None.
#
f_dismount_gui () {
      #
      # mountpoint command 0=directory is a mountpoint (already mounted).
      #                    1=directory is not a mountpoint (not mounted).
      # Test if unmounted already,
      # if so then don't unmount again or will get mount error.
      #
      #
      mountpoint $2 >/dev/null
      ERROR=$?
      if [ $ERROR -eq 0 ] ; then  # mountpoint is mounted so now dismount.
         sudo umount $2 2>temp.txt # Write any error messages to file temp.txt.
      fi
      # Was umount command successful?
      if [ -s temp.txt ] ; then  # File temp.txt contains error message, so display it.
         $1 --textbox temp.txt 20 80
      fi
      #
      if [ -r temp.txt ] ; then
         rm temp.txt
      fi
      # echo "Dismounted $2"  # Diagnostic line.
      unset ERROR
} # End of function f_dismount_gui.
#
# +----------------------------------------+
# |        Function f_update_menu_gui      |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=GENERATED_FILE.
#          $3=Menu Title.
#          $4=MAX_LENGTH
#          $5=MAX_LINES
#    Uses: GENERATED_FILE, ARRAY_NAME, ARRAY_LEN, XNUM, SERVER.
# Outputs: None.
#
f_update_menu_gui () {
      echo "#!/bin/bash" >$2
      echo "#" >>$2
      echo "VERSION=\"$VERSION\"" >>$2
      echo "#" >>$2
      echo "#***********************************CAUTION***********************************" >>$2
      echo "# Any edits made to this code will be lost since this code is" >>$2
      echo "# automatically generated and updated by running the script," >>$2
      echo "# \"mountup_gui.sh\" which contains data for the server menu." >>$2
      echo "#***********************************CAUTION***********************************" >>$2
      echo "#" >>$2
      echo "# +----------------------------------------+" >>$2
      echo "# |        Function f_server_menu_gui      |" >>$2
      echo "# +----------------------------------------+" >>$2
      echo "#" >>$2
      echo "#  Inputs: \$1=GUI." >>$2
      echo "#    Uses: VERSION, THIS_FILE, CHOICE_SERVER, MENU_TITLE." >>$2
      echo "# Outputs: None." >>$2
      echo "#" >>$2
      echo "f_server_menu_gui () {" >>$2
      echo "      # Invoke the file mountup_lib_gui.lib functions to display menu." >>$2
      echo "      . mountup_lib_gui.lib    # invoke the necessary files". >>$2
      echo "      #" >>$2
      echo "      f_server_arrays  # Create arrays from script mountup_gui.sh." >>$2
      echo "      #" >>$2
      echo "      CHOICE_SERVER=\"\"  # Initialize variable." >>$2
      echo "      until [ \"\$CHOICE_SERVER\" = \"0\" ]" >>$2
      echo "            do    # Start of Main Menu until loop." >>$2
                           MENU_TITLE=$(echo $3 | tr '_' ' ')
      echo "               MENU_TITLE=\"$MENU_TITLE\"" >>$2
      #
      # Get the screen resolution or X-window size.
      # Get rows (height).
      Y=$(stty size | awk '{ print $1 }')
      # Get columns (width).
      X=$(stty size | awk '{ print $2 }')
      #
      # If screen or window width is greater than MAX_LENGTH_UI (number of characters).
      # Then shrink menu display to fit number of characters.
      let MAX_LENGTH=$4+10
      if [ $X -gt $MAX_LENGTH ] ; then
         X=$MAX_LENGTH
      fi
      #
      # Pad vertical menu box display for a minimum display area.
      let MAX_LINES=$5+7
      if [ $Y -gt $MAX_LINES ] ; then
         let Y=$MAX_LINES
      fi
      # 
      # Menu height - actual height of menu options.
      # Because the SERVER Arrays have possibly more than one element per server name,
      # The calculated menu height will be wrong with this type of array structure.
      # Force menu height to an eye-pleasing value so that menu window is not too long.
      Z=8
      #
      case $1 in
           dialog)
           if [ $3 = "Main_Menu" ] ; then    
              echo "               CHOICE_SERVER=\$(\$GUI --no-cancel --clear --title \"\$MENU_TITLE\" --menu \"\n\nUse (up/down arrow keys) or (letters):\" $Y $X $Z \\" >>$2
           else
              echo "               CHOICE_SERVER=\$(\$GUI --clear --title \"\$MENU_TITLE\" --menu \"\n\nUse (up/down arrow keys) or (letters):\" $Y $X $Z \\" >>$2
           fi
           ;;
           whiptail)
           if [ $3 = "Main_Menu" ] ; then    
              echo "               CHOICE_SERVER=\$(\$GUI --nocancel --clear --title \"\$MENU_TITLE\" --menu \"\n\nUse (up/down arrow keys) or (letters):\" $Y $X $Z \\" >>$2
           else
              echo "               CHOICE_SERVER=\$(\$GUI --clear --title \"\$MENU_TITLE\" --menu \"\n\nUse (up/down arrow keys) or (letters):\" $Y $X $Z \\" >>$2
           fi
           ;;
      esac
      #
      #echo "               CHOICE_SERVER=\$(\$GUI --clear --title \"\$MENU_TITLE\" --menu \"\n\nUse (up/down arrow keys) or (letters):\" 20 80 11 \\" >>$2
      echo "                     \"Quit\" \"Quit to command line prompt.\" \\" >>$2
      echo "                     \"Show\" \"Show mounted directories.\" \\" >>$2
      ARRAY_NAME="SERVER"
      ARRAY_LEN=$(eval "echo \$\{#$ARRAY_NAME[@]\}")
      ARRAY_LEN=$(eval echo $ARRAY_LEN)
            for (( XNUM=1; XNUM<=${ARRAY_LEN}; XNUM++ ));
                do
                   SERVER=$(eval "echo \$\{$ARRAY_NAME[$XNUM]\}")
                   SERVER=$(eval echo $SERVER)
                   if [ -n $SERVER ] ; then
                       echo "                     \"$SERVER\" \"$SERVER fileserver.\" \\" >>$2
                   fi
                done
      echo "                     \"About\" \"Version information of this script.\" \\" >>$2
      echo "                     \"Code History\" \"Display code change history of this script.\" \\" >>$2
      echo "               2>&1 >/dev/tty)" >>$2
      echo "               case \$CHOICE_SERVER in" >>$2
      echo "                    \"Quit\") break ;;" >>$2
      echo "                    \"Show\") f_show_mount_points_gui \$GUI ;;" >>$2
      echo "                    \"About\") f_about_gui \$GUI ;;" >>$2
      echo "                    \"Code History\") f_code_history_gui \$GUI ;;" >>$2
      ARRAY_NAME="SERVER"
      ARRAY_LEN=$(eval "echo \$\{#$ARRAY_NAME[@]\}")
      ARRAY_LEN=$(eval echo $ARRAY_LEN)
            for (( XNUM=1; XNUM<${ARRAY_LEN}; XNUM++ ));
                do
                   SERVER=$(eval "echo \$\{$ARRAY_NAME[$XNUM]\}")
                   SERVER=$(eval echo $SERVER)
                   if [ -n $SERVER ] ; then
                      echo "                    \"${SERVER[$XNUM]}\") f_action_menu_gui \$GUI $SERVER" >>$2
                      echo "                    ;;" >>$2
                   fi
                done
      echo "               esac" >>$2
      echo "       done" >>$2
      echo "       unset VERSION THIS_FILE CHOICE_SERVER MENU_TITLE  # Throw out this variable." >>$2
      echo "       #" >>$2
      echo "       } # End of function f_server_menu_gui." >>$2
      unset ARRAY_NAME ARRAY_LEN XNUM SERVER
} # End of function f_update_menu_gui.
#
# +----------------------------------------+
# |        Function f_update_menu_gui-oem      |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=GENERATED_FILE.
#    Uses: GENERATED_FILE, ARRAY_NAME, ARRAY_LEN, XNUM, SERVER.
# Outputs: None.
#
f_update_menu_gui-oem () {
      echo "#!/bin/bash" >$2
      echo "#" >>$2
      echo "VERSION=\"$VERSION\"" >>$2
      echo "#" >>$2
      echo "#***********************************CAUTION***********************************" >>$2
      echo "# Any edits made to this code will be lost since this code is" >>$2
      echo "# automatically generated and updated by running the script," >>$2
      echo "# \"mountup_gui.sh\" which contains data for the server menu." >>$2
      echo "#***********************************CAUTION***********************************" >>$2
      echo "#" >>$2
      echo "# +----------------------------------------+" >>$2
      echo "# |        Function f_server_menu_gui      |" >>$2
      echo "# +----------------------------------------+" >>$2
      echo "#" >>$2
      echo "#  Inputs: \$1=GUI." >>$2
      echo "#    Uses: VERSION, THIS_FILE, CHOICE_SERVER, MENU_TITLE." >>$2
      echo "# Outputs: None." >>$2
      echo "#" >>$2
      echo "f_server_menu_gui () {" >>$2
      echo "      # Invoke the file mountup_lib_gui.lib functions to display menu." >>$2
      echo "      . mountup_lib_gui.lib    # invoke the necessary files". >>$2
      echo "      #" >>$2
      echo "      f_server_arrays  # Create arrays from script mountupgui.sh." >>$2
      echo "      #" >>$2
      echo "      CHOICE_SERVER=\"\"  # Initialize variable." >>$2
      echo "      until [ \"\$CHOICE_SERVER\" = \"0\" ]" >>$2
      echo "            do    # Start of Main Menu until loop." >>$2
      echo "               MENU_TITLE=\"Server Menu\"" >>$2
      echo "               CHOICE_SERVER=\$(\$GUI --clear --title \"\$MENU_TITLE\" --menu \"\n\nUse (up/down arrow keys) or (letters):\" 20 80 11 \\" >>$2
      echo "                     \"Quit\" \"Quit to command line prompt.\" \\" >>$2
      echo "                     \"Show\" \"Show mounted directories.\" \\" >>$2
      ARRAY_NAME="SERVER"
      ARRAY_LEN=$(eval "echo \$\{#$ARRAY_NAME[@]\}")
      ARRAY_LEN=$(eval echo $ARRAY_LEN)
            for (( XNUM=1; XNUM<=${ARRAY_LEN}; XNUM++ ));
                do
                   SERVER=$(eval "echo \$\{$ARRAY_NAME[$XNUM]\}")
                   SERVER=$(eval echo $SERVER)
                   if [ -n $SERVER ] ; then
                       echo "                     \"$SERVER\" \"$SERVER fileserver.\" \\" >>$2
                   fi
                done
      echo "                     \"About\" \"Version information of this script.\" \\" >>$2
      echo "                     \"Code History\" \"Display code change history of this script.\" \\" >>$2
      echo "               2>&1 >/dev/tty)" >>$2
      echo "               case \$CHOICE_SERVER in" >>$2
      echo "                    \"Quit\") break ;;" >>$2
      echo "                    \"Show\") f_show_mount_points_gui \$GUI ;;" >>$2
      echo "                    \"About\") f_about_gui \$GUI ;;" >>$2
      echo "                    \"Code History\") f_code_history_gui \$GUI ;;" >>$2
      ARRAY_NAME="SERVER"
      ARRAY_LEN=$(eval "echo \$\{#$ARRAY_NAME[@]\}")
      ARRAY_LEN=$(eval echo $ARRAY_LEN)
            for (( XNUM=1; XNUM<${ARRAY_LEN}; XNUM++ ));
                do
                   SERVER=$(eval "echo \$\{$ARRAY_NAME[$XNUM]\}")
                   SERVER=$(eval echo $SERVER)
                   if [ -n $SERVER ] ; then
                      echo "                    \"${SERVER[$XNUM]}\") f_action_menu_gui \$GUI $SERVER" >>$2
                      echo "                    ;;" >>$2
                   fi
                done
      echo "               esac" >>$2
      echo "       done" >>$2
      echo "       unset VERSION THIS_FILE CHOICE_SERVER MENU_TITLE  # Throw out this variable." >>$2
      echo "       #" >>$2
      echo "       } # End of function f_server_menu_gui." >>$2
      unset ARRAY_NAME ARRAY_LEN XNUM SERVER
} # End of function f_update_menu_gui-oem.
#
# +----------------------------------------+
# |        Function f_action_menu_gui      |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=Server name.
#    Uses: CHOICE_ACT, PASSWORD, MENU_TITLE.
# Outputs: None.
#
f_action_menu_gui () {
      # Invoke the file mountup_lib_gui.lib functions to display menu.
      . mountup_lib_gui.lib    # invoke the necessary files.
      f_server_arrays
      CHOICE_ACT=-1
      until [ "$CHOICE_ACT" = "0" ]
      do    # Start of Mount/Dismount File Server Menu until loop.
            MENU_TITLE="Mount/Dismount $2 File Server Menu"
            CHOICE_ACT=$($1 --clear --title "$MENU_TITLE" --menu "\n\n For $2 server - Use (up/down arrow keys) or (letters):" 20 80 11 \
                   "Quit" "Quit to command line prompt." \
                   "Show" "Show mounted directories." \
                   "Mount all" "Mount all shared directories." \
                   "Dismount all" "Dismount all shared directories." \
                   "Pick" "Pick shared directories to mount or dismount."\
            2>&1 >/dev/tty)
            #
            case $CHOICE_ACT in
                 "Quit") break ;;
                 "Show") f_show_mount_points_gui $1 ;;
                 "Mount all") f_test_connection $1 $2
                         if [ $ERROR -eq 0 ] ; then
                            f_mount_or_dismount_all_gui $1 $2 "mount"
                         fi
                         f_show_mount_points_gui $1
                         ;;
                 "Dismount all")
                         f_test_connection $1 $2
                         if [ $ERROR -eq 0 ] ; then
                            f_mount_or_dismount_all_gui $1 $2 "dismount"
                         fi
                         f_show_mount_points_gui $1
                         ;;
                 "Pick")
                         f_test_connection $1 $2
                         if [ $ERROR -eq 0 ] ; then
                            f_pick_menu_gui $1 $2 mountup_sharepoints_menu_gui.lib
                         fi
                         f_show_mount_points_gui $1
                         ;;
            esac
      done  # End of Mount/Dismount File Server Menu until loop.
      #
      if [ -r mountup_sharepoints_menu_gui.lib ] ; then
         rm mountup_sharepoints_menu_gui.lib
      fi
      unset CHOICE_ACT MENU_TITLE # Throw out this variable.
} # End of function f_action_menu_gui.
#
# +----------------------------------------+
# |        Function f_pick_menu_gui        |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=SERVER NAME.
#          $3=GENERATED_FILE.
#    Uses: GENERATED_FILE, ARRAY_NAME, ARRAY_LEN, XNUM, SERVER, MP, SP, ERROR, MOUNT_POINT_DESC, QUIT.
# Outputs: STATUS[XNUM], $2_DESC[XNUM].
#
f_pick_menu_gui () {
      echo "#!/bin/bash" >$3
      echo "#" >>$3
      echo "VERSION=\"$VERSION\"" >>$3
      echo "#" >>$3
      echo "#***********************************CAUTION***********************************" >>$3
      echo "# Any edits made to this code will be lost since this code is" >>$3
      echo "# automatically generated and updated by running the function," >>$3
      echo "# \"f_action_update_gui\" within the library script \"mountup_lib_gui.lib\"" >>$3
      echo "# which is called by script \"mountup_gui.sh\"." >>$3
      echo "#***********************************CAUTION***********************************" >>$3
      echo "#" >>$3
      echo "# +----------------------------------------+" >>$3
      echo "# |        Function f_checklist_mp_gui     |" >>$3
      echo "# +----------------------------------------+" >>$3
      echo "#" >>$3
      echo "#  Inputs: \$1=Server name." >>$3
      echo "#    Uses: None." >>$3
      echo "# Outputs: CHOICE_ACT." >>$3
      echo "#" >>$3
      echo "f_checklist_mp_gui () {" >>$3
      f_server_arrays
      ARRAY_NAME="$2_DESC"
      ARRAY_LEN=$(eval "echo \$\{#\$ARRAY_NAME[@]\}")
      ARRAY_LEN=$(eval echo $ARRAY_LEN)
      #
      for (( XNUM=1; XNUM<=${ARRAY_LEN}; XNUM++ ));
          do
             MP=$(eval echo "\$\{$2_MP[$XNUM]\}")   # Create command "${<server_name>_MP[$NUM]}" from array <Server name>_MP[n].
             MP=$(eval echo $MP)
             #
             mountpoint $MP >/dev/null  # Get status of mountpoint, mounted?.
             ERROR=$?
             if [ $ERROR -eq 1 ] ; then  # Directory is not mounted.
                STATUS[$XNUM]="off" # Create STATUS array entry to indicate whether directory is not mounted for f_checklist_mp_gui.
                # echo "$MP is not mounted."  # Diagnostic line.
             else                        # Directory is mounted.
                STATUS[$XNUM]="on"  # Create STATUS array entry to indicate whether directory is mounted for f_checklist_mp_gui.
                # echo "$MP is mounted."  # Diagnostic line.
             fi
             #
          done
          #
      echo "CHOICE_ACT=\$($1 --checklist \"Choose $2 shared directory:\" 20 80 11 \\" >>$3
      #
      for (( XNUM=1; XNUM<=${ARRAY_LEN}; XNUM++ ));
          do
             MOUNT_POINT_DESC=$(eval "echo \$\{$ARRAY_NAME[$XNUM]\}")
             MOUNT_POINT_DESC=$(eval echo $MOUNT_POINT_DESC)
             MOUNT_POINT_DESC=$(echo $MOUNT_POINT_DESC | tr '_' ' ')  #Substitute <underscores> to <spaces>.
             echo "$XNUM '$MOUNT_POINT_DESC' ${STATUS[$XNUM]} \\" >>$3
          done
      echo "2>&1 >/dev/tty)" >>$3
      echo "} # End of function f_checklist_mp_gui." >>$3
      #
      # Invoke the file $3 which contains the function, f_checklist_mp.
      . $3
      f_checklist_mp_gui $2
      ERROR=$?
      # echo "Exit code ERROR=$ERROR"  # Diagnostic line.
      # echo "CHOICE_ACT=$CHOICE_ACT"  # Diagnostic line.
      # f_press_enter_key_to_continue  # Diagnostic line.
      #
      QUIT=0
      if [ $ERROR = 0 ] ; then  # If <Cancel> button was not pressed.
         if [  -n "$SMBUSER" ] ; then  # if SMBUSER is not null, already set then confirm SMBUSER as the username.
            f_username_gui $1 $SMBUSER $4
            if [ $ERROR -ne 0 ] ; then  # <Cancel> button was pressed.
               QUIT=1  # Quit out of loop in f_pick_menu_gui.
            fi
         else
            f_username_gui $1 $USER $4   # if SMBUSER is null, so not yet set, then use USER as the default username.
            if [ $ERROR -ne 0 ] ; then  # <Cancel> button was pressed.
               QUIT=1  # Quit out of loop in f_pick_menu_gui.
            fi
         fi
         #
         if [ $QUIT -eq 0 ] ; then
            f_password_gui $1 $3
            if [ $ERROR -ne 0 ] ; then  # <Cancel> button was pressed.
               QUIT=1  # Quit out of loop in f_pick_menu_gui.
            fi
         fi
         #
         if [ $QUIT -eq 0 ] ; then
            for (( XNUM=1; XNUM<=${ARRAY_LEN}; XNUM++ ));
                do
                   SP=$(eval echo "\$\{$2_SP[$XNUM]\}")   # Create command "${<server_name>_SP[$NUM]}" from array <Server name>_SP[n].
                   SP=$(eval echo $SP)
                   #
                   MP=$(eval echo "\$\{$2_MP[$XNUM]\}")   # Create command "${<server_name>_MP[$NUM]}" from array <Server name>_MP[n].
                   MP=$(eval echo $MP)
                   #
                   # echo "XNUM=$XNUM"  # Diagnostic line.
                   # echo "SP=$SP"      # Diagnostic line.
                   # echo "MP=$MP"      # Diagnostic line.
                   # echo "CHOICE_ACT=$CHOICE_ACT" # Diagnostic line.
                   # echo "f_pick_match $1 $XNUM $SP $MP"  # Diagnostic line.
                   #
                   f_pick_match $1 $XNUM $SP $MP  # CHOICE_ACT cannot be passed as a parameter because string contains <spaces>.
                   #
                   # f_press_enter_key_to_continue  # Diagnostic line.
                   # echo  # Diagnostic line.
                done
         fi
      fi
}  # End of function f_pick_menu_gui
#
# +----------------------------------------+
# |         Function f_pick_match          |
# +----------------------------------------+
#
#  Inputs: $1=GUI - "dialog" or "whiptail" The CLI GUI application in use.
#          $2=XNUM
#          $3=SP Share-point.
#          $4=MP Mount-point.
#          CHOICE_ACT
#    Uses: MNT.
# Outputs: QUIT.
#
f_pick_match () {
      if [[ "$CHOICE_ACT" =~ "$2" ]] ; then  # Does CHOICE_ACT contain XNUM?
         # Yes, CHOICE_ACT contains XNUM so mount it.
         for MNT in $CHOICE_ACT  # for-loop to allow username and password to be asked more than once if needed.
             do
                if [[ $MNT =~ $2 ]] ; then  # Does MNT contain XNUM?
                   # Yes, MNT contains XNUM so mount it. 
                   # echo "Mount $3 on $4"  # Diagnostic line.
                   f_mount_gui $1 $3 $4 $SMBUSER $PASSWORD  # Yes, so mount it.
                fi
            done
      else  # No CHOICE_ACT does not contain XNUM, so unmount it.
         # echo "Unmount $4 from $3"  # Diagnostic line.
         f_dismount_gui $1 $4
      fi
      unset MNT
}  # End of function f_pick_match
