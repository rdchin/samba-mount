#!/bin/bash
#
VERSION="2017-04-20 00:25"
THIS_FILE="mountup_gui.sh"
#
#@ Brief Description
#@
#@ This script will mount shared cifs (Samba) directories from one or more
#@ file servers. The shared (Samba) directories will be mounted on the
#@ corresponding mount-point (directories) on theLocal PC.
#@
#@ Code Change History is maintained in the library file, "mountup_lib_gui.lib"
#@ and can be read from the Main Menu.
#
# +----------------------------------------+
# |          Function f_detect_ui          |
# +----------------------------------------+
#
#  Inputs: None.
#    Uses: ERROR.
# Outputs: GUI (dialog, whiptail, text).
#
f_detect_ui () {
      command -v dialog >/dev/null
      # "&>/dev/null" does not work in Debian distro.
      # 1=standard messages, 2=error messages, &=both.
      ERROR=$?
      # Is Dialog GUI installed?
      if [ $ERROR -eq 0 ] ; then
         # Yes, Dialog installed.
         GUI="dialog"
      else
         # Is Whiptail GUI installed?
         command -v whiptail >/dev/null
         # "&>/dev/null" does not work in Debian distro.
         # 1=standard messages, 2=error messages, &=both.
         ERROR=$?
         if [ $ERROR -eq 0 ] ; then
            # Yes, Whiptail installed.
            GUI="whiptail"
         else
            # No CLI GUIs installed
            GUI="text"
         fi
      fi
} # End of function f_detect_ui.
#
# **************************************
# ***     Start of Main Program      ***
# **************************************
#
# If an error occurs, the f_abort_txt() function will be called.
# trap 'f_abort_txt' 0
# set -e
#
# SUDO_ASKPASS="sudoask" ; export SUDO_ASKPASS
#
# Test for GUI (Whiptail or Dialog) or pure text environment.
f_detect_ui
#GUI="whiptail"  #Test diagnostic line.
#GUI="dialog"    #Test diagnostic line.
#
if [ -r mountup_lib_gui.lib ] ; then  # Does library file exist and is readable in the same directory as this script.
   . mountup_lib_gui.lib  # Invoke library.
else
   $GUI --infobox "Missing a required file: \"mountup_lib_gui.lib\" from this directory.\n\n                    *** Aborting program ***" 5 71
   exit 0  # This cleanly closes the process generated by #!bin/bash. 
           # Otherwise every time this script is run, another instance of
           # process /bin/bash is created using up resources.
fi
#
# Test for BASH environment.
f_test_environment
#
# Set SCRIPT_PATH to directory path of script.
f_script_path
MAINMENU_DIR=$SCRIPT_PATH
THIS_DIR=$MAINMENU_DIR  # Set $THIS_DIR to location of Main Menu.
#
GENERATED_FILE="mountup_server_menu_gui.lib"
#
f_server_arrays
#
TARGET_SERVER=$1
#
if [ -n "$TARGET_SERVER" ] ; then  # If $TARGET_SERVER is non-null.
   f_mount_or_dismount_all_gui $GUI $TARGET_SERVER mount
   f_show_mount_points_gui $GUI
   exit 0  # This cleanly closes the process generated by #!bin/bash. 
           # Otherwise every time this script is run, another instance of
           # process /bin/bash is created using up resources.
fi
#
f_update_menu_gui $GUI $GENERATED_FILE
#
. $GENERATED_FILE  # Invoke Generated file.
f_server_menu_gui $GUI
#
if [ -r $GENERATED_FILE ] ; then
   rm $GENERATED_FILE
fi
#
exit 0  # This cleanly closes the process generated by #!bin/bash. 
        # Otherwise every time this script is run, another instance of
        # process /bin/bash is created using up resources.
# all dun dun noodles.
