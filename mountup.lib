#!/bin/bash
#
# Â©2024 Copyright 2024 Robert D. Chin
# Email: RDevChin@Gmail.com
#
# Usage: source mountup.lib
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# +----------------------------------------+
# |        Default Variable Values         |
# +----------------------------------------+
#
VERSION="2024-02-26 18:04"
#
# Commented out THIS_FILE since it will conflict other scripts which
# use this library.
#THIS_FILE=$(basename $0)
#
# +----------------------------------------+
# |            Brief Description           |
# +----------------------------------------+
#
#& Brief Description
#&
#& Library of BASH functions, mountup.lib is a child dependency
#& used by the following scripts.
#&
#& Parent script: mountup.sh.
#&
#& See script mountup.sh for Edit History.
#&
#& Usage: source mountup.lib
#&
#&    This program is free software: you can redistribute it and/or modify
#&    it under the terms of the GNU General Public License as published by
#&    the Free Software Foundation, either version 3 of the License, or
#&    (at your option) any later version.
#&
#&
#&    This program is distributed in the hope that it will be useful,
#&    but WITHOUT ANY WARRANTY; without even the implied warranty of
#&    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#&    GNU General Public License for more details.
#&
#&    You should have received a copy of the GNU General Public License
#&    along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# +----------------------------------------+
# |           Code Change History          |
# +----------------------------------------+
#
## Code Change History
##
## (Please see script "mountup.sh" for Code History information.)
#
# +--------------------------------------------------------------------------+
# |                                                                          |
# |              Customize Server Menu choice options below.                 |
# |                                                                          |
# +--------------------------------------------------------------------------+
#
#                 >>> !!!Warning!!! <<<
#
# The Menu Item Descriptions cannot have semi-colons, colons, asterisks,
# single-quotes (apostrophes), double-quotes, ampersands, greater-than and less-than signs.
#
# Forbidden characters include ; : * ' " & > <
#
# These characters will compromise the creation of arrays which
# in turn creates the menu.
#
# General Format: <#@@> <Menu Option> <#@@> <Description of Menu Option> <#@@> <Corresponding function or action or command>
#
# Sub-Menu Format when using f_menu_main_all_menus to show a sub-menu.
#        f_menu_main_all_menus^"text", "dialog", or "whiptail"^Menu Title^$ARRAY_SOURCE_FILE (File containing sub-menu entries).
#
# List of inputs for f_menu_main_all_menus
#  Inputs: $1 - "text", "dialog" or "whiptail" The command-line user-interface application in use.
#          $2 - MENU_TITLE (Title of the sub-menu)
#          $3 - ARRAY_SOURCE_FILE (Not a temporary file) includes menu items from multiple menus.
#
#! +--------------------------------------------------------------+
#! | Start Listing Server Menu                                    |
#! |               (Required header, do not delete).              |
#! +--------------------------------------------------------------+
#
#@@Exit#@@Return to previous menu on PC "$HOSTNAME".#@@break
#
#@@R2D2#@@R2D2 Server shared geek scripts.#@@f_menu_server_action^$GUI^R2D2
#
#@@C3PO#@@C3PO Server shared Library.#@@f_menu_server_action^$GUI^C3PO
#
#@@Local PC: $HOSTNAME#@@This PC with USB drive attached.#@@f_detect_state_of_local_usb_drive^$GUI
#
#@@Show Local/LAN drives#@@Show Local drives, LAN drive mount points.#@@f_show_mount_points^$GUI
#
#! End Listing Server Menu (Required line, do not delete).
#
# +----------------------------------------+
# |        Function f_check_version        |
# +----------------------------------------+
#
#     Rev: 2024-02-22
#  Inputs: $1 - "text", "dialog" or "whiptail" the command-line user-interface in use.
#          $2 - [OPTIONAL] File name to compare.
#          $3 - [OPTIONAL] to control display of messages and interactive user questions.
#                          null (default) - Display error and status messages and interactive user questions.
#                          1              - Display error messages only (Silent mode).
#          FILE_TO_COMPARE.
#    Uses: SERVER_DIR, MP_DIR, LOCAL_REPO_DIR, $FILE_TO_COMPARE, FILE_LIST,
#          VERSION, TEMP_FILE, ERROR.
# Outputs: ERROR.
#
# Summary: Check the version of a single, local file or script,
#          FILE_TO_COMPARE with the version of repository file.
#          If the repository file has latest version, then copy all
#          dependent files and libraries from the repository to local PC.
#
# TO DO enhancement: If local (LAN) repository is unavailable, then
#          connect to repository on the web if available.
#
# Dependencies: f_version_compare.
#
# PLEASE NOTE: RENAME THIS FUNCTION WITHOUT SUFFIX "_TEMPLATE" AND COPY
#              THIS FUNCTION INTO ANY SCRIPT WHICH DEPENDS ON THE
#              LIBRARY FILE "common_bash_function.lib".
#
f_check_version () {
      #
      #
      #=================================================================
      # EDIT THE LINES BELOW TO DEFINE THE LAN FILE SERVER DIRECTORY,
      # LOCAL MOUNTPOINT DIRECTORY, LOCAL REPOSITORY DIRECTORY AND
      # FILE TO COMPARE BETWEEN THE LOCAL PC AND (LAN) LOCAL REPOSITORY.
      #=================================================================
      #
      #
      # LAN File Server shared directory.
      # SERVER_DIR="[FILE_SERVER_DIRECTORY_NAME_GOES_HERE]"
      if [ -z "$SERVER_DIR" ] ; then
        SERVER_DIR="//file_server/files"
      fi
      #
      # Local PC mount-point directory.
      # MP_DIR="[LOCAL_MOUNT-POINT_DIRECTORY_NAME_GOES_HERE]"
      if [ -z "$MP_DIR" ] ; then
        MP_DIR="/mnt/file_server/files"
      fi
      #
      # Local PC mount-point with LAN File Server Local Repository full directory path.
      # Example:
      #                   File server shared directory is "//file_server/public".
      # Repository directory under the shared directory is "scripts/BASH/Repository".
      #                 Local PC Mount-point directory is "/mnt/file_server/public".
      #
      # Local PC mount-point with LAN File Server Local Repository full directory path.
      # LOCAL_REPO_DIR="$MP_DIR/[DIRECTORY_PATH_TO_LOCAL_REPOSITORY]"
      if [ -z "$LOCAL_REPO_DIR" ] ; then
        LOCAL_REPO_DIR="$MP_DIR/Local_Repository"
      fi
      #
      # Local PC file to be compared.
      if [ $# -eq 2 ] ; then
         # There are 2 arguments that have been passed to this function.
         # $2 contains the file name to compare.
         FILE_TO_COMPARE=$2
      else
         # $2 is null, so specify file name.
         if [ -z "$FILE_TO_COMPARE" ] ; then
            # FILE_TO_COMPARE is undefined so specify file name.
            FILE_TO_COMPARE=$(basename $0)
         fi
      fi
      #
      # Version of Local PC file to be compared.
      VERSION=$(grep --max-count=1 "VERSION" $FILE_TO_COMPARE)
      #
      # Initialize variables.
      FILE_LIST=$THIS_DIR/$THIS_FILE"_file_temp.txt"
      ERROR=0
      #
      # Delete any existing file.
      # This assures that FILE_LIST is not appended to but is newly created
      # in the code below. Added because typo may occur when using redirection
      # where typo ">>" is used instead of ">" at FILE NAME1.
      # i.e. typo at echo "[ FILE NAME1 GOES HERE ]"  >> $FILE_LIST
      if [ -e $FILE_LIST ] ; then
         rm $FILE_LIST
      fi
      #
      #
      #=================================================================
      # EDIT THE LINES BELOW TO SPECIFY THE FILE NAMES TO UPDATE.
      # FILE NAMES INCLUDE ALL DEPENDENT SCRIPTS AND LIBRARIES.
      #=================================================================
      #
      #
      # Create list of files to update and write to temporary file, FILE_LIST.
      #
      echo "mountup.sh"                > $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "mountup.lib"              >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "mountup_servers.lib"      >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "mountup_local.lib"        >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      echo "common_bash_function.lib" >> $FILE_LIST  # <<<--- INSERT ACTUAL FILE NAME HERE.
      #
      f_version_compare $1 $SERVER_DIR $MP_DIR $LOCAL_REPO_DIR $FILE_TO_COMPARE "$VERSION" $FILE_LIST
      #
      if [ -r  $FILE_LIST ] ; then
         rm  $FILE_LIST
      fi
      #
}  # End of function f_check_version.
#
# +----------------------------------------+
# |          Function f_install_app        |
# +----------------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" the command-line user-interface in use.
#          $2 - Application to execute.
#          THIS_DIR, THIS_FILE.
#    Uses: None.
# Outputs: RUNAPP.
#
# Summary: Run an executable application.
#
# Dependencies: apt, f_message, f_bad_sudo_password.
#
f_install_app () {
      #
      # Does app exist and is executable?
      if [ -x $2 ] ; then
         # Yes, execute application.
         eval $2
         #
         # Set flag RUNAPP to indicate app was run.
         RUNAPP=1
      else
         # No, app is not executable or is missing.
         #
         # Set flag RUNAPP to indicate app not run.
         RUNAPP=0
         #
         # Clear screen.
         clear
         #
         case $1 in
              whiptail | dialog)
                 # Temporary file has \Z commands embedded for red bold font.
                 #
                 # \Z commands are used by Dialog to change font attributes
                 # such as color, bold/normal.
                 #
                 # A single string is used with echo -e \Z1\Zb\Zn commands
                 # and output as a single line of string wit \Zn commands embedded.
                 #
                 # Single string is neccessary because \Z commands will not be
                 # recognized in a temp file containing <CR><LF> multiple lines also.
                 #
                 X="\n\Z1\ZbScript \"$2\" either is missing\nor needs execute (chmod +x) permissions.\n\n\ZnInstall $2 using \"apt install $2\" from the command line."
                 f_message $1 "NOK" "Installing $2" "$X"
                 #
                 # Clear screen.
                 clear
                 #
                 # Run a sudo command to catch bad sudo passwords.
                 sudo --validate
                 ERROR=$?
                 if [ $ERROR -eq 0 ] ; then
                    sudo apt install $2
                    ERROR=$?
                    if [ $ERROR -neq 0 ] ; then
                       echo -n $(tput sgr0) # Set font to normal color.
                       sleep 5
                    fi
                 else
                    f_bad_sudo_password $1
                 fi
                 #
                 # Clear screen.
                 clear
                 #
              ;;
              *)
                 # Create temporary file containing message.
                 X="\n\Z1\ZbScript \"$2\" either is missing\nor needs execute (chmod +x) permissions.\n\n\ZnInstall $2 using \"apt install $2\" from the command line."
                 f_message $1 "NOK" "Installing $2" "$X"
                 #
                 # Clear screen.
                 clear
                 #
                 # Run a sudo command to catch bad sudo passwords.
                 sudo --validate
                 ERROR=$?
                 if [ $ERROR -eq 0 ] ; then
                    sudo apt install $2
                    ERROR=$?
                    if [ $ERROR -neq 0 ] ; then
                       sleep 5
                    fi
                 else
                    f_bad_sudo_password $1
                 fi
                 #
                 # Clear screen.
                 clear
                 #
              ;;
         esac
         #
         # Execute application that was just installed.
         chmod 755 $2
         eval $2
         #
         # Set flag RUNAPP to indicate app was run.
         RUNAPP=1
      fi
      #
}  # End of function f_install_app.
#
# +----------------------------------------+
# |      Function f_file_manager_select    |
# +----------------------------------------+
#
#  Inputs: $1 - "text", "dialog" or "whiptail" the command-line user-interface in use.
#          $2 - TARGET_DIR.
#          $3 - [Optional] Foreground/Background process flag.
#               1 or null - Run file manager as a foreground process.
#               2 - Run file manager as a Background process.
#          THIS_DIR, THIS_FILE.
#    Uses: RUNAPP, FILE_MANAGER.
# Outputs: None.
#
# Summary: Run an executable script or script
#
# Dependencies: apt, f_message, f_bad_sudo_password.
#
f_file_manager_select () {
      #
      # Detect and run a file manager for the appropriate CLI or X-Windows
      # environment.
      f_file_manager $1 $2 $3
      #
      # ERROR=0 when a file manager is detected and run.
      # ERROR=1 a file manager needs to be installed.
      #
      if [ $ERROR -eq 1 ] ; then
         # File Manager (listed in the For-loop) was not automatically detected.
         # A file manager of your choice needs to be installed and run.
         #
         #
         #================================================================================
         # EDIT THE LINE BELOW TO DEFINE THE PREFERRED FILE MANAGER APPLICATION.
         #================================================================================
         #
         #
         FILE_MANAGER="mc"
         #
         # None of the applications are installed so install the preferred app and then run it.
         f_install_app $1 $FILE_MANAGER
      fi
      #
      unset RUNAPP FILE_MANAGER
      #
}  # End of function f_file_manager_select.
#
